{
    "name": "karma-problem-matcher",
    "displayName": "Karma Problem Matcher",
    "description": "Capture errors from Karma tests running in Visual Studio Code",
    "version": "1.0.0",
    "license": "MIT",
    "engines": {
        "vscode": "^1.29.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "contributes": {
        "problemMatchers": [
            {
                "name": "karma-jasmine2",
                "owner": "typescript",
                "severity": "error",
                "pattern": [
                    {
                        "regexp": "\\s+(Expected .*)",
                        "message": 1
                    },
                    {
                        "regexp": "[^\\(]*\\(http://[^:]+:\\d+/(.*)\\?:(\\d+):(\\d+)\\)",
                        "file": 1,
                        "line": 2,
                        "column": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": {
                        "regexp": "(^\\s+\\d+%\\s+(compiling|building))|(Executed \\d+)"
                    },
                    "endsPattern": {
                        "regexp": "^TOTAL: \\d+"
                    }
                }
            },
            {
                "name": "karma-jasmine3",
                "owner": "typescript",
                "severity": "error",
                "pattern": [
                    {
                        "regexp": "\\s+(Expected .*)",
                        "message": 1
                    },
                    {
                        "regexp": "^\\s+at <Jasmine>$"
                    },
                    {
                        "regexp": "[^\\(]*\\(http://[^:]+:\\d+/(.*)\\?:(\\d+):(\\d+)\\)",
                        "file": 1,
                        "line": 2,
                        "column": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": {
                        "regexp": "(^\\s+\\d+%\\s+(compiling|building))|(Executed \\d+)"
                    },
                    "endsPattern": {
                        "regexp": "^TOTAL: \\d+"
                    }
                }
            }
        ]
    }
}